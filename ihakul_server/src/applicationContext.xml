<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns= "http://www.springframework.org/schema/beans"
       xmlns:xsi= "http://www.w3.org/2001/XMLSchema-instance" xmlns:aop= "http://www.springframework.org/schema/aop"
       xmlns:context= "http://www.springframework.org/schema/context" xmlns:tx= "http://www.springframework.org/schema/tx"
       xmlns:jpa= "http://www.springframework.org/schema/data/jpa"
       xmlns:security= "http://www.springframework.org/schema/security"
       xmlns:task="http://www.springframework.org/schema/task"
       xsi:schemaLocation= "
            http://www.springframework.org/schema/aop
            http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
            http://www.springframework.org/schema/security
            http://www.springframework.org/schema/security/spring-security-3.2.xsd
            http://www.springframework.org/schema/beans
            http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
            http://www.springframework.org/schema/data/jpa
            http://www.springframework.org/schema/data/jpa/spring-jpa-1.3.xsd
            http://www.springframework.org/schema/tx
            http://www.springframework.org/schema/tx/spring-tx-4.0.xsd
            http://www.springframework.org/schema/context
            http://www.springframework.org/schema/context/spring-context-4.0.xsd
            http://www.springframework.org/schema/task
            http://www.springframework.org/schema/task/spring-task-3.2.xsd" >
    <context:annotation-config></context:annotation-config>
	<!-- 使用annotation 自动注册bean,并保证@Required,@Autowired的属性被注入 -->
    <context:component-scan base-package="com.xiaoai.*" />
    
    	<!-- 定时器 -->
    	<task:annotation-driven/>
   		<task:scheduled-tasks>   
			<task:scheduled ref="xiaoiTaskTimer" method="job" cron="0 * * * * ?"/>   
		</task:scheduled-tasks>
    
    
     <!-- 1.配置数据库相关参数properties的属性：${url} -->
	<context:property-placeholder location="classpath:jdbc.properties" />
  	<!-- 连接池 -->
	<bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource"
		>
     	<property name="driverClass" value="${jdbc.driver}" />
		<property name="jdbcUrl" value="${jdbc.url}" />
		<property name="user" value="${jdbc.username}" />
		<property name="password" value="${jdbc.password}" />
	
	
		<!--初始化时获取的连接数，取值应在minPoolSize与maxPoolSize之间。Default: 3 -->
		<!-- <property name="initialPoolSize" value="3" /> -->
		<!--连接池中保留的最小连接数。 -->
		<property name="minPoolSize" value="1" />
		
		<!--连接池中保留的最大连接数。Default: 15 -->
		<property name="maxPoolSize" value="30" />
		<!--最大空闲时间,60秒内未使用则连接被丢弃。若为0则永不丢弃。Default: 0 -->
		<property name="maxIdleTime" value="60" />
		<!--当连接池中的连接耗尽的时候c3p0一次同时获取的连接数。Default: 3 -->
		<property name="acquireIncrement" value="500" />
		<!--每60秒检查所有连接池中的空闲连接。Default: 0 -->
		<property name="idleConnectionTestPeriod" value="60" />
		<!-- 关闭连接后不自动commit -->
		<property name="autoCommitOnClose" value="false" />		
	</bean>
	
 
    <!--配置事务  -->
	<tx:annotation-driven transaction-manager="txManager" />
		<!-- 事务 -->
	<bean id="txManager"
		class="org.springframework.orm.hibernate3.HibernateTransactionManager">
		<property name="sessionFactory" ref="sessionFactory" />
		<property name="nestedTransactionAllowed" value="true" />
	</bean>
   <!--spring 配置sessionFactory   -->
	<bean id="sessionFactory"
		class="org.springframework.orm.hibernate3.annotation.AnnotationSessionFactoryBean">
		<property name="dataSource">
			<ref bean="dataSource" />
		</property>
		<property name="hibernateProperties">
			<props>
			<!-- 数据库方言 mysql -->
				<prop key="hibernate.dialect">org.hibernate.dialect.MySQLDialect</prop>
				<prop key="javax.persistence.validation.mode">none</prop>
			<!-- 	格式化输出的sql语句(可选)  -->
				<!-- <prop key="hibernate.format_sql">true</prop> -->
			<!-- 	是否打印sql语句  -->
				<prop key="hibernate.show_sql">true</prop>
				<!--  配置二级缓存
				<prop key="hibernate.cache.use_second_level_cache">true</prop>
				由于查询的缓存命中率很低，所以关掉查询时的二级缓存 
				<prop key="hibernate.cache.use_query_cache">false</prop>
				 配置二级缓存的相应的类 
				<prop key=" hibernate.cache.provider_class">
				org.hibernate.cache.EhCacheProvider
				</prop> -->
			</props>
		</property>
		<property name="packagesToScan">
			<list>
				<value>com.xiaoai.entity</value>
			</list>
		</property>	
		<property name="annotatedClasses">
			<list>
				<value>com.xiaoai.entity.Role</value>
				<value>com.xiaoai.entity.Administrate</value>
				<value>com.xiaoai.entity.Familygroup</value>
				<value>com.xiaoai.entity.Household</value>
				<value>com.xiaoai.entity.Users</value>
				<value>com.xiaoai.entity.Xiaoi</value>
				<value>com.xiaoai.entity.Xiaoilog</value>
				<value>com.xiaoai.entity.Privilege</value>
				<value>com.xiaoai.entity.Versions</value>
				<value>com.xiaoai.entity.Datadictionary</value>
				<value>com.xiaoai.entity.FamilyUser</value>
				<value>com.xiaoai.entity.Channel</value>
				<value>com.xiaoai.entity.XiaoiSMS</value>
				<value>com.xiaoai.entity.XiaoiSMSMessage</value>
				<value>com.xiaoai.entity.Xiaoiurl</value>
				<value>com.xiaoai.entity.Xiaoitask</value>
				<value>com.xiaoai.entity.XiaoiMode</value>
			</list>
		</property></bean>

	<bean id="hibernateTemplate" class="org.springframework.orm.hibernate3.HibernateTemplate">
		<property name="sessionFactory" ref="sessionFactory"></property>
	</bean>





	<!-- spring集成 -->
		<!-- 设置 I/O 接受器，并指定接收到请求后交给 myHandler 进行处理 --> 
		<bean id="customEditorConfigurer" class="org.springframework.beans.factory.config.CustomEditorConfigurer">
		   <property name="customEditors" >
		     <map>
		       <entry key="java.net.SocketAddress"  value="org.apache.mina.integration.beans.InetSocketAddressEditor"/>
		     </map>
		   </property>
		 </bean>
		 
		 <!-- handlers事件 -->
		<bean id="xiaoIoHandler" class="com.xiaoai.mina.service.handler.ServiceMainHandler">
			<property name="handlers">
				<map>
					<entry key="client_bind">  <!-- 创建连接 -->
						<bean class="com.xiaoai.mina.service.handler.BindHandler"></bean>
					</entry>
						<entry key="client_logout"> <!-- 断开连接 -->
						<bean class="com.xiaoai.mina.service.handler.LogoutHandler"></bean>
					</entry>
						<entry key="client_closs">  <!--断开清除会话  -->
						<bean class="com.xiaoai.mina.service.handler.SessionClossHanler"></bean>
					</entry>
						
					<entry key="client_push">  <!--在线推送消息  -->
						<bean class="com.xiaoai.mina.service.handler.PushOnlinMessageHandler"></bean>
					</entry>
				</map>
			</property>
		</bean>
		 <!-- IoAccepter，绑定到1255端口 -->
		  <!-- 通过 init-method指明了当 I/O 接受器创建成功之后，调用其 bind方法来接受连接；通过 destroy-method声明了当其被销毁的时候，调用其 unbind来停止监听 -->
	    <bean id="SerNioSociketAcceptor"  class="com.xiaoai.mina.service.SerNioSociketAcceptor" 
	    init-method="bind" destroy-method="unbind">  
	         <property name="port" value="42687" /> 
			 <property name="ioHandler" ref="xiaoIoHandler" /> 
	    </bean>
	     
	     <!--spring动态获取bean实现  -->
	    <bean id="ContextHolder" class="com.xiaoai.util.ContextHolder"></bean>
	    
	   	<bean id="XiaoaiSessionManage" class="com.xiaoai.mina.service.session.DefaultSessionManager"/> 
	   
	   	<bean id="sessionManager" class="com.xiaoai.mina.service.push.DefaultMessagePusher">
	   		<property name="sessionManager" ref="XiaoaiSessionManage"/>
	   	</bean>
	   	
	   	
	   <bean id="filterChainBuilder"
        class="org.apache.mina.core.filterchain.DefaultIoFilterChainBuilder">
        <property name="filters">
            <map>
                <!--mina自带的线程池filter-->
                <entry key="executor" value-ref="executorFilter" />
                <entry key="mdcInjectionFilter" value-ref="mdcInjectionFilter" />
                <!--自己实现的编解码器filter-->
              <!--   <entry key="codecFilter" value-ref="codecFilter" /> -->
                <!--日志的filter-->
                <entry key="loggingFilter" value-ref="loggingFilter" />
                <!--心跳filter-->
                <entry key="keepAliveFilter" value-ref="keepAliveFilter" />
            </map>
        </property>
    </bean>
	
	<!-- executorFilter多线程处理 -->  
	<bean id="executorFilter" class="org.apache.mina.filter.executor.ExecutorFilter" />
	<bean id="mdcInjectionFilter" class="org.apache.mina.filter.logging.MdcInjectionFilter">
		<constructor-arg value="remoteAddress" />
	</bean>
	
	 <!--日志的filter-->
	<bean id="loggingFilter" class="org.apache.mina.filter.logging.LoggingFilter" />
	
	<!--自己实现的编解码器filter  -->
	<bean id="codecFilter" class="org.apache.mina.filter.codec.ProtocolCodecFilter">
	<constructor-arg>
	<bean class="com.xiaoai.mina.service.filter.ServerMessageCodecFactory"></bean>
		</constructor-arg>
	</bean>
	   	
	   	
	   <!--心跳检测filter-->
    <bean id="keepAliveFilter" class="org.apache.mina.filter.keepalive.KeepAliveFilter">
        <!--构造函数的第一个参数传入自己实现的工厂-->
        <constructor-arg>
            <bean class="com.xiaoai.mina.service.filter.KeepAliveMessageFactoryImpl"></bean>
        </constructor-arg>
        <!--第二个参数需要的是IdleStatus对象，value值设置为读写空闲-->
        <constructor-arg type = "org.apache.mina.core.session.IdleStatus" value="BOTH_IDLE" >
       </constructor-arg>
        <!--心跳频率，不设置则默认60s  -->
        <property name="requestInterval" value="5" />
        <!--心跳超时时间，不设置则默认30s    -->
        <property name="requestTimeout" value="10" />
        <!--不设置默认false-->
        <property name="forwardEvent" value="true" />
    </bean> 	
	   	
	   	
	   	<!-- 定时器 
	   	<bean id="pushMessageTiming" class="com.xiaoai.service.timing.PushMessageTiming"></bean>-->
	     <!-- 调度定时器任务 
    	<bean id="pushMessageTimingjob" class="org.springframework.scheduling.timer.ScheduledTimerTask">
       	 	<property name="timerTask">
           	 	<ref bean="pushMessageTiming" />
        	</property>
        <property name="delay">
            <value>10000</value>
        </property>
        <property name="period">
            <value>3600000</value>
        </property>
    </bean> --> 
	   	 <!-- 启动定时器
    <bean class="org.springframework.scheduling.timer.TimerFactoryBean"> 
        <property name="scheduledTimerTasks"> 
            <list> 
                <ref bean="pushMessageTimingjob"/> 
            </list> 
        </property> 
    </bean>  --> 
	   	
	   	
</beans>